[{"title":"一文了解Java类加载机制","url":"/2021/12/03/jvm/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/","content":"类加载过程加载\n​    主要是将.class文件中的二进制字节流读入到jvm中\n\n通过累的全限定名获取该类的二进制字节流\n将字节流所代表的的静态存储结构转化为方法区的运行时数据结构\n在内存中生成一个该类的java.lang.Class对象，作为在方法区中这个类的访问入口\n\n\n连接\n验证\n\n验证是连接阶段的第一步，这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。\n\n\n文件格式验证\n\n第一阶段要验证字节流是否符合Class文件格式的规范\n\n\n元数据验证\n\n第二阶段是对字节码描述的信息进行语义分析，以保证其描述的信息符合《Java语言规范》的要求\n第二阶段的主要目的是对类的元数据信息进行语义校验，保证不存在与《Java语言规范》定义相悖的元数据信息。\n\n\n字节码验证\n\n第三阶段是整个验证过程中最复杂的一个阶段，主要目的是通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的。\n在第二阶段对元数据信息中的数据类型校验完毕以后，这阶段就要对类的方法体（Class文件中的Code属性）进行校验分析，保证被校验类的方法在运行时不会做出危害虚拟机安全的行为\n\n\n符号引用验证\n\n最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作将在连接的第三阶段——解析阶段中发生。符号引用验证可以看作是对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验，通俗来说就是，该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。\n\n\n\n\n\n准备\n准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段，从概念上讲，这些变量所使用的内存都应当在方法区中进行分配，但必须注意到方法区本身是一个逻辑上的区域，在JDK 7及之前，HotSpot使用永久代来实现方法区时，实现是完全符合这种逻辑概念的；而在JDK 8及之后，类变量则会随着Class对象一起存放在Java堆中，这时候“类变量在方法区”就完全是一种对逻辑概念的表述了\n\n\n关于准备阶段，还有两个容易产生混淆的概念需要着重强调，首先是这时候进行内存分配的仅包括类变量，而不包括实例变量，实例变量将会在对象实例化时随着对象一起分配在Java堆中。\n其次是这里所说的初始值“通常情况”下是数据类型的默认值，而不是程序员定义的默认值。\n\n解析\n解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程\n\n\n符号引用（Symbolic References）：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。\n\n\n直接引用（Direct References）：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。\n\n初始化\n类的初始化阶段是类加载过程的最后一个步骤，之前介绍的几个类加载的动作里，除了在加载阶段用户应用程序可以通过自定义类加载器的方式局部参与外，其余动作都完全由Java虚拟机来主导控制。直到初始化阶段，Java虚拟机才真正开始执行类中编写的Java程序代码，将主导权移交给应用程序\n\n\n进行准备阶段时，变量已经赋过一次系统要求的初始零值，而在初始化阶段，则会根据程序员通过程序编码制定的主观计划去初始化类变量和其他资源\n\n\n初始化顺序\n\n父类的静态变量和静态块\n子类的静态变量和静态块\n父类的成员变量和构造块\n父类的构造方法\n子类的成员变量和构造块\n子类的构造方法\n\n\n类加载器\n对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间\n\n\n比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等\n这里所指的“相等”，包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法的返回结果，也包括了使用instanceof关键字做对象所属关系判定等各种情况。\n\n启动类加载器（Bootstrap Class Loader）\n这个类加载器负责加载存放在\\lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，而且是Java虚拟机能够识别的（按照文件名识别，如rt.jar、tools.jar，名字不符合的类库即使放在lib目录中也不会被加载）类库加载到虚拟机的内存中。\n\n扩展类加载器（Extension Class Loader）\n这个类加载器是在类sun.misc.Launcher$ExtClassLoader中以Java代码的形式实现的。它负责加载\\lib\\ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。\n\n应用程序类加载器（Application Class Loader）\n这个类加载器由sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystemClassLoader()方法的返回值，所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径（ClassPath）上所有的类库，开发者同样可以直接在代码中使用这个类加载器。如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。\n\n双亲委派模型\n\n双亲委派模型是来组织类加载器之间的关系，一个显而易见的好处就是Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系。例如类java.lang.Object，它存放在rt.jar之中，无论哪一个类加载器要加载这个类，最终都是委派给处于模型最顶端的启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都能够保证是同一个类。\n\n","categories":["JVM"],"tags":["JVM"]},{"title":"开源协议是什么","url":"/2021/09/23/%E5%BC%80%E6%BA%90/%E4%BB%A3%E7%A0%81%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E6%98%AF%E4%BB%80%E4%B9%88/","content":"\n近期国内智能设备制造商 UMIDIGI 因违反 GPLv2 协议引发争议。最终经过沟通，UMIDIGI 将源代码放到了官网论坛和 GitHub 上…详情\n\n什么是开源协议开源协议规定了你在使用开源软件时的权利和责任，也就是规定了你可以做什么，不可以做什么。\n常用的开源协议\nGNU GPL（GNU General Public License，GNU通用公共许可证）\nBSD（Berkeley Software Distribution，伯克利软件发布版）协议BSD 协议基本上允许用户“为所欲为”，用户可以使用、修改和重新发布遵循该许可的软件，并且可以将软件作为商业软件发布和销售\nApache 许可证版本（Apache License Version）协议Apache 和 BSD 类似，都适用于商业软件。Apache 协议在为开发人员提供版权及专利许可的同时，允许用户拥有修改代码及再发布的自由。\nMIT（Massachusetts Institute of Technology）协议目前限制最少的开源许可协议之一（比 BSD 和 Apache 的限制都少），只要程序的开发者在修改后的源代码中保留原作者的许可信息即可，因此普遍被商业软件所使用。\nGUN LGPL（GNU Lesser General Public License，GNU 宽通用公共许可证）LGPL 是 GPL 的一个衍生版本，也被称为 GPL V2，该协议主要是为类库设计的开源协议。\n\n如何选择开源协议图片来自：如何选择开源许可证？\n","categories":["开源"],"tags":["开源"]}]